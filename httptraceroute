#! /usr/bin/perl

use strict;
use 5.010;
use LWP::UserAgent;
use HTTP::Status;
use Getopt::Std;
use Data::Dumper;
use Time::HiRes qw(gettimeofday);

our $VERSION="0.01";

my %opts;
getopt(''. %opts);

my $URL=shift;
if ($URL !~ /^http/){
	$URL = "http://$URL";
}

my $ua = LWP::UserAgent->new();
$ua->agent("HTTPTraceroute/$VERSION ");
$ua->max_redirect(0);

print header();
my $t_start = gettimeofday;
hop($URL);
sub hop{
	my $url = shift;
	my $t_request = gettimeofday;
	my $response = $ua->get($url);
	my $t_response = gettimeofday;
	my $t_totalElapsed = $t_response - $t_start;
	my $t_thisRequest = $t_response - $t_request;
	my ($nexthop, $message) = found($response);
	print statusLine($response,$url,$t_totalElapsed, $t_thisRequest, $message, $nexthop);
	if ($nexthop =~ /.+/){
		hop($nexthop);
	}
}


sub header{
	return sprintf("%-9s %-9s %-22s %-30s %-4s %-23s %s\n", qw/total this socket server code meaning nexthop/);
}


sub statusLine{
	my $r = shift;
	my $url = shift;
	my $totalTime = shift;
	my $thisRequestTime = shift;
	my $redirectMessage = shift;
	my $nexthop = shift;
	my $line = sprintf("%.4fms  ", $totalTime);
	$line .= sprintf("%.4fms  ", $thisRequestTime);
	$line .= sprintf("%-20s  ", getIP($r));
	$line .= sprintf(" %-30s", substr($r->header("server"), 0, 30));
	$line .= sprintf(" %-3s  ", $r->code);
	if (!$redirectMessage){
#		$redirectMessage = (split(/\s+/, status_message($r->code)))[0];
		$redirectMessage = status_message($r->code);
	}
	$line.= sprintf("%-21s  ", $redirectMessage);
	$line.=" $nexthop";
	$line.="\n";
	return $line;

}

sub found{
	my $response = shift;
	if(is_redirect($response->code)){
		return $response->{'_headers'}->{'location'}, undef;
	}
	if(is_success($response->code)){
		my @refreshes = grep (/http-equiv\s*=\s*.refresh./, split(/\n+/, $response->decoded_content));
		if(@refreshes > 0){
			foreach(@refreshes){
				if($_ =~ /content=["']\d+;url=(\S*)["']>/i){
					return $1, "http-equiv refresh";
				}
			}
		}
	}
	return;
}

sub getIP {
	my $r = shift;
	return $r->{'_headers'}->{'client-peer'};
}
